import ctypes
import ctypes.util
import os

os.environ['LIBRARY_PATH'] = os.path.dirname(os.path.abspath(__file__))
test_path = ctypes.util.find_library('test')
test = ctypes.CDLL(os.path.abspath(test_path))


class struct_point(ctypes.Structure):
    pass
struct_point._pack_ = 1
struct_point._fields_ = [
    ('x', ctypes.c_int),
    ('y', ctypes.c_int),
]


class struct_empty(ctypes.Structure):
    pass


class struct_nested(ctypes.Structure):
    pass
struct_nested._pack_ = 1
struct_nested._fields_ = [
    ('p', struct_point),
    ('z', ctypes.c_int),
]


class struct_forward_declaration(ctypes.Structure):
    pass

test.add_points.restype = struct_point
test.add_points.argtypes = [struct_point, struct_point]

test.add_points2.restype = None
test.add_points2.argtypes = [ctypes.POINTER(struct_point), ctypes.POINTER(struct_point)]


class struct_bitty(ctypes.Structure):
    pass
struct_bitty._pack_ = 1
struct_bitty._fields_ = [
    ('a', ctypes.c_int, 1),
    ('b', ctypes.c_int, 2),
    ('c', ctypes.c_int, 4),
    ('d', ctypes.c_int, 8),
    ('e', ctypes.c_int, 16),
]


class struct_list(ctypes.Structure):
    pass
struct_list._pack_ = 1
struct_list._fields_ = [
    ('next', ctypes.POINTER(struct_list)),
]
