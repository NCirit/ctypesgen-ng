import ctypes
import ctypes.util
import os

os.environ['LIBRARY_PATH'] = os.path.dirname(os.path.abspath(__file__))
test_path = ctypes.util.find_library('test')
test = ctypes.CDLL(os.path.abspath(test_path))

test.strcmp.restype = ctypes.c_int
test.strcmp.argtypes = [ctypes.c_char_p, ctypes.c_char_p]

test.gcd.restype = None
test.gcd.argtypes = [ctypes.POINTER(ctypes.c_int), ctypes.POINTER(ctypes.c_int)]

test.my_strchr.restype = ctypes.c_char_p
test.my_strchr.argtypes = [ctypes.c_char_p, ctypes.c_char]

test.byte_to_hex.restype = ctypes.c_char_p
test.byte_to_hex.argtypes = [ctypes.c_ubyte]

test.sbyte_to_hex.restype = ctypes.c_char_p
test.sbyte_to_hex.argtypes = [ctypes.c_byte]

test.pipe2.restype = ctypes.c_int
test.pipe2.argtypes = [(ctypes.c_int * 2), ctypes.c_int]

test.sin.restype = ctypes.c_double
test.sin.argtypes = [ctypes.c_double]

test.cosf.restype = ctypes.c_float
test.cosf.argtypes = [ctypes.c_float]

test.strtol.restype = ctypes.c_long
test.strtol.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int]

test.strtoll.restype = ctypes.c_longlong
test.strtoll.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int]

test.strtoul.restype = ctypes.c_ulong
test.strtoul.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int]

test.strtoull.restype = ctypes.c_ulonglong
test.strtoull.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int]

test.my_memcmp.restype = ctypes.c_int
test.my_memcmp.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_uint]

test.short_add_with_overflow.restype = ctypes.c_int
test.short_add_with_overflow.argtypes = [ctypes.c_short, ctypes.c_short, ctypes.POINTER(ctypes.c_short)]

test.unsigned_short_add_with_overflow.restype = ctypes.c_int
test.unsigned_short_add_with_overflow.argtypes = [ctypes.c_ushort, ctypes.c_ushort, ctypes.POINTER(ctypes.c_ushort)]

test.getid.restype = ctypes.c_int
test.getid.argtypes = []

test.printf.restype = ctypes.c_int

test.execve.restype = ctypes.c_int
test.execve.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(ctypes.c_char_p)]

test.noproto.restype = ctypes.c_int

test.defaultrettype.restype = ctypes.c_int
test.defaultrettype.argtypes = [ctypes.c_char_p]

test.blasphemy.restype = ctypes.c_int
