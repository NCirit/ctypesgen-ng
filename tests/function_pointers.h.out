### This file automatically created by ctypesgen-ng, the commandline parameters passed to it are given below
### /app/ctypesgen.py --clang-flags "-Wno-error=implicit-int" --ignore-included --library test.so --headers tests/function_pointers.h

import ctypes
import ctypes.util
import os


if not ('LIBRARY_PATH' in os.environ):
    if 'PYTHONPATH' in os.environ:
        os.environ['LIBRARY_PATH'] = os.environ['PYTHONPATH']
    else:
        os.environ['LIBRARY_PATH'] = os.path.dirname(os.path.abspath(__file__))

if os.name == "nt":
    if 'PYTHONPATH' in os.environ:
        os.environ['PATH'] += os.pathsep + os.environ['PYTHONPATH']
    else:
        os.environ['PATH'] += os.pathsep + os.path.dirname(os.path.abspath(__file__))
test_path = ctypes.util.find_library('test')
test = ctypes.CDLL(os.path.abspath(test_path))

typedef_compar_t = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p)

var_default_cmp = typedef_compar_t.in_dll(test, 'default_cmp')

test.my_qsort.restype = None
test.my_qsort.argtypes = [ctypes.c_void_p, ctypes.c_ulong, ctypes.c_ulong, typedef_compar_t]


class struct_vtable(ctypes.Structure):
    pass
struct_vtable._pack_ = 1
struct_vtable._fields_ = [
    ('cmp', typedef_compar_t),
    ('add', ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p)),
]

typedef_meta_t = ctypes.CFUNCTYPE(None, ctypes.CFUNCTYPE(None))

test.signal.restype = ctypes.CFUNCTYPE(None, ctypes.c_int)
test.signal.argtypes = [ctypes.c_int, ctypes.CFUNCTYPE(None, ctypes.c_int)]

typedef_noproto_t = ctypes.CFUNCTYPE(ctypes.c_int)

typedef_defaultrettype_t = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_char_p)

typedef_blasphemy_t = ctypes.CFUNCTYPE(ctypes.c_int)
