import ctypes
import ctypes.util
import os


if not ('LIBRARY_PATH' in os.environ):
    if 'PYTHONPATH' in os.environ:
        os.environ['LIBRARY_PATH'] = os.environ['PYTHONPATH']
    else:
        os.environ['LIBRARY_PATH'] = os.path.dirname(os.path.abspath(__file__))

if os.name == "nt":
    if 'PYTHONPATH' in os.environ:
        os.environ['PATH'] += os.pathsep + os.environ['PYTHONPATH']
    else:
        os.environ['PATH'] += os.pathsep + os.path.dirname(os.path.abspath(__file__))
test_path = ctypes.util.find_library('test')
test = ctypes.CDLL(os.path.abspath(test_path))

typedef_gint = ctypes.c_int

test.gint_to_int.restype = ctypes.c_int
test.gint_to_int.argtypes = [typedef_gint]

test.int_to_gint.restype = typedef_gint
test.int_to_gint.argtypes = [ctypes.c_int]

enum_color = ctypes.c_uint
enum_constant_RED = 0
enum_constant_GREEN = 1
enum_constant_BLUE = 2

typedef_color_t = enum_color

test.rank_color.restype = ctypes.c_int
test.rank_color.argtypes = [typedef_color_t]

test.best_color.restype = typedef_color_t
test.best_color.argtypes = []


class struct_point(ctypes.Structure):
    pass
struct_point._pack_ = 1
struct_point._fields_ = [
    ('x', ctypes.c_int),
    ('y', ctypes.c_int),
]

typedef_point_t = struct_point

test.add_points.restype = typedef_point_t
test.add_points.argtypes = [typedef_point_t, typedef_point_t]

test.add_points2.restype = None
test.add_points2.argtypes = [ctypes.POINTER(typedef_point_t), ctypes.POINTER(typedef_point_t)]


class struct_point2_t(ctypes.Structure):
    pass
struct_point2_t._pack_ = 1
struct_point2_t._fields_ = [
    ('x', ctypes.c_int),
    ('y', ctypes.c_int),
]

typedef_point2_t = struct_point2_t

enum_color2_t = ctypes.c_uint
enum_constant_YELLOW = 0
enum_constant_CYAN = 1
enum_constant_MAGENTA = 2

typedef_color2_t = enum_color2_t


class union_type_t(ctypes.Union):
    pass
union_type_t._pack_ = 1
union_type_t._fields_ = [
    ('s', ctypes.c_char_p),
    ('i', ctypes.c_int),
    ('d', ctypes.c_double),
]

typedef_type_t = union_type_t

typedef_point_pointer_t = ctypes.POINTER(struct_point)

test.process.restype = None
test.process.argtypes = [typedef_point_pointer_t]
