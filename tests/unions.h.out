import ctypes
import ctypes.util
import os


if not ('LIBRARY_PATH' in os.environ):
    if 'PYTHONPATH' in os.environ:
        os.environ['LIBRARY_PATH'] = os.environ['PYTHONPATH']
    else:
        os.environ['LIBRARY_PATH'] = os.path.dirname(os.path.abspath(__file__))

if os.name == "nt":
    if 'PYTHONPATH' in os.environ:
        os.environ['PATH'] += os.pathsep + os.environ['PYTHONPATH']
    else:
        os.environ['PATH'] += os.pathsep + os.path.dirname(os.path.abspath(__file__))
test_path = ctypes.util.find_library('test')
test = ctypes.CDLL(os.path.abspath(test_path))


class union_simple(ctypes.Union):
    pass
union_simple._pack_ = 1
union_simple._fields_ = [
    ('x', ctypes.c_int),
    ('y', ctypes.c_float),
]


class union_empty(ctypes.Union):
    pass


class union_nested(ctypes.Union):
    pass
union_nested._pack_ = 1
union_nested._fields_ = [
    ('s', union_simple),
    ('z', ctypes.c_longlong),
]


class union_forward_declaration(ctypes.Union):
    pass

test.binary.restype = union_simple
test.binary.argtypes = [union_simple, union_simple]

test.binary2.restype = None
test.binary2.argtypes = [ctypes.POINTER(union_simple), ctypes.POINTER(union_simple)]


class union_bitty(ctypes.Union):
    pass
union_bitty._pack_ = 1
union_bitty._fields_ = [
    ('a', ctypes.c_int, 1),
    ('b', ctypes.c_int, 2),
    ('c', ctypes.c_int, 4),
    ('d', ctypes.c_int, 8),
    ('e', ctypes.c_int, 16),
]


class struct_tagged_union(ctypes.Structure):
    pass
struct_tagged_union._pack_ = 1
struct_tagged_union._fields_ = [
    ('type', ctypes.c_int),
    ('u', union_simple),
]
